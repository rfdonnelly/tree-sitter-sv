==================
package
==================

package p;
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
  )
)

==================
package with lifetime
==================

package static p;
endpackage

---

(source_text
  (package_declaration
    (lifetime)
    (simple_identifier)
  )
)

==================
package with timeunits
==================

package p;
  timeunit 1ns;
  timeprecision 1ns;
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
    (timeunits_declaration (time_literal) (time_literal))
  )
)

==================
package with end identifier
==================

package p;
  timeprecision 1ns;
  timeunit 1ns;
endpackage : p

---

(source_text
  (package_declaration
    (simple_identifier)
    (timeunits_declaration (time_literal) (time_literal))
    (simple_identifier)
  )
)

==================
package with null items
==================

package p;
  ;
  ;
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
    (package_item)
    (package_item)
  )
)

==================
package with variables
==================

package p;
  int a;
  int b = expression;
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
    (package_item (data_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)
        )
      )
    ))
    (package_item (data_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)
          (expression)
        )
      )
    ))
  )
)

==================
package with variables and functions
==================

package p;
  int a;
  int b;
  function void f();
  endfunction
  function void g();
  endfunction
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
    (package_item (data_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)
        )
      )
    ))
    (package_item (data_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)
        )
      )
    ))
    (package_item
      (function_declaration
        (function_body_declaration_ansi
          (function_data_type_or_implicit (data_type_or_void))
          (simple_identifier)
        )
      )
    )
    (package_item
      (function_declaration
        (function_body_declaration_ansi
          (function_data_type_or_implicit (data_type_or_void))
          (simple_identifier)
        )
      )
    )
  )
)

==================
package with parameters
==================

package p;
  localparam int a = constant_param_expression, b = constant_param_expression;
  parameter int a = constant_param_expression, b = constant_param_expression;
endpackage

---

(source_text
  (package_declaration
    (simple_identifier)
    (package_item (local_parameter_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_param_assignments
        (param_assignment
          (simple_identifier)
          (constant_param_expression)
        )
        (param_assignment
          (simple_identifier)
          (constant_param_expression)
        )
      )
    ))
    (package_item (parameter_declaration
      (data_type_or_implicit (data_type (integer_atom_type)))
      (list_of_param_assignments
        (param_assignment
          (simple_identifier)
          (constant_param_expression)
        )
        (param_assignment
          (simple_identifier)
          (constant_param_expression)
        )
      )
    ))
  )
)
